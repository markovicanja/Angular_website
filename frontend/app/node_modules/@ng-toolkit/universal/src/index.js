"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const _utils_1 = require("@ng-toolkit/_utils");
const test_1 = require("@schematics/angular/utility/test");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const bugsnag = require("bugsnag");
function index(options) {
    bugsnag.register('0b326fddc255310e516875c9874fed91');
    bugsnag.onBeforeNotify((notification) => {
        let metaData = notification.events[0].metaData;
        metaData.subsystem = {
            package: 'universal',
            options: options
        };
    });
    const templateSource = schematics_1.apply(schematics_1.url('files'), [
        schematics_1.move(options.directory),
    ]);
    let rule = schematics_1.chain([
        tree => {
            const packageJsonSource = JSON.parse(test_1.getFileContent(tree, `${options.directory}/package.json`));
            if (packageJsonSource.dependencies['@ng-toolkit/serverless']) {
                tree.delete(`${options.directory}/local.js`);
                tree.delete(`${options.directory}/server.ts`);
                tree.delete(`${options.directory}/webpack.server.config.js`);
            }
        },
        schematics_1.mergeWith(templateSource, schematics_1.MergeStrategy.Overwrite),
        (tree, context) => {
            // update project name
            _utils_1.updateProject(tree, options);
            // add dependencies
            _utils_1.addDependencyToPackageJson(tree, options, '@angular/platform-browser', '^6.0.0');
            _utils_1.addDependencyToPackageJson(tree, options, '@angular/platform-server', '^6.0.0');
            _utils_1.addDependencyToPackageJson(tree, options, '@nguniversal/module-map-ngfactory-loader', '^6.0.0');
            _utils_1.addDependencyToPackageJson(tree, options, 'webpack-cli', '^2.1.4');
            _utils_1.addDependencyToPackageJson(tree, options, 'ts-loader', '4.2.0');
            _utils_1.addDependencyToPackageJson(tree, options, '@nguniversal/express-engine', '^6.0.0');
            _utils_1.addDependencyToPackageJson(tree, options, 'cors', '~2.8.4');
            // update CLI config
            const distFolder = _utils_1.getDistFolder(tree, options);
            const cliConfig = JSON.parse(test_1.getFileContent(tree, `${options.directory}/angular.json`));
            cliConfig.projects[options.project].architect.build.options.outputPath = `${distFolder}/browser`;
            cliConfig.projects[options.project].architect.server =
                {
                    "builder": "@angular-devkit/build-angular:server",
                    "options": {
                        "outputPath": `${distFolder}/server`,
                        "main": `src/main.server.ts`,
                        "tsConfig": "src/tsconfig.server.json"
                    }
                };
            tree.overwrite(`${options.directory}/angular.json`, JSON.stringify(cliConfig, null, "  "));
            // manipulate entry modules
            // add proper module
            const entryModule = _utils_1.getAppEntryModule(tree, options);
            const serverModulePath = `${options.directory}/src/app/app.server.module.ts`;
            _utils_1.addImportStatement(tree, serverModulePath, entryModule.moduleName, _utils_1.getRelativePath(serverModulePath, entryModule.filePath));
            const serverNgModuleDecorator = _utils_1.getDecoratorSettings(tree, serverModulePath, 'NgModule');
            serverNgModuleDecorator.imports.unshift(entryModule.moduleName);
            const browserModulePath = `${options.directory}/src/app/app.browser.module.ts`;
            const browserNgModuleDecorator = _utils_1.getDecoratorSettings(tree, browserModulePath, 'NgModule');
            // add bootstrap component
            const bootstrapComponents = _utils_1.getBootStrapComponent(tree, entryModule.filePath);
            bootstrapComponents.forEach(bootstrapComponent => {
                _utils_1.addImportStatement(tree, serverModulePath, bootstrapComponent.component, _utils_1.getRelativePath(serverModulePath, bootstrapComponent.filePath));
                serverNgModuleDecorator.bootstrap = [bootstrapComponent.component];
                serverNgModuleDecorator.imports.push(`BrowserModule.withServerTransition({appId: '${bootstrapComponent.appId}'})`);
                // manipulate browser module
                _utils_1.addImportStatement(tree, browserModulePath, entryModule.moduleName, _utils_1.getRelativePath(browserModulePath, entryModule.filePath));
                browserNgModuleDecorator.imports.push(entryModule.moduleName);
                browserNgModuleDecorator.imports.push(`BrowserModule.withServerTransition({appId: '${bootstrapComponent.appId}'})`);
                browserNgModuleDecorator.bootstrap = [bootstrapComponent.component];
                _utils_1.addImportStatement(tree, browserModulePath, bootstrapComponent.component, _utils_1.getRelativePath(browserModulePath, bootstrapComponent.filePath));
            });
            _utils_1.updateDecorator(tree, serverModulePath, 'NgModule', serverNgModuleDecorator);
            _utils_1.updateDecorator(tree, browserModulePath, 'NgModule', browserNgModuleDecorator);
            // manipulate old entry module
            const appNgModuleDecorator = _utils_1.getDecoratorSettings(tree, entryModule.filePath, 'NgModule');
            delete appNgModuleDecorator.bootstrap;
            appNgModuleDecorator.imports.splice(appNgModuleDecorator.imports.indexOf(appNgModuleDecorator.imports.find((entry) => {
                return entry.indexOf("BrowserModule") > -1;
            })), 1);
            appNgModuleDecorator.imports.push("CommonModule");
            _utils_1.addImportStatement(tree, entryModule.filePath, 'CommonModule', '@angular/common');
            _utils_1.updateDecorator(tree, entryModule.filePath, 'NgModule', appNgModuleDecorator);
            // update main file
            const mainFilePath = _utils_1.getMainFilePath(tree, options);
            const entryFileSource = test_1.getFileContent(tree, `${options.directory}/${mainFilePath}`);
            tree.overwrite(`${options.directory}/${mainFilePath}`, entryFileSource.replace(new RegExp(`bootstrapModule\\(\\s*${entryModule.moduleName}\\s*\\)`), `bootstrapModule(AppBrowserModule)`));
            _utils_1.addImportStatement(tree, `${options.directory}/${mainFilePath}`, 'AppBrowserModule', _utils_1.getRelativePath(mainFilePath, browserModulePath));
            // upate server.ts and local.js and webpack config with proper dist folder
            tree.overwrite(`${options.directory}/server.ts`, test_1.getFileContent(tree, `${options.directory}/server.ts`).replace(/__distFolder__/g, distFolder).replace(/__browserDistFolder__/g, _utils_1.getBrowserDistFolder(tree, options)));
            tree.overwrite(`${options.directory}/local.js`, test_1.getFileContent(tree, `${options.directory}/local.js`).replace(/__distFolder__/g, distFolder));
            tree.overwrite(`${options.directory}/webpack.server.config.js`, test_1.getFileContent(tree, `${options.directory}/webpack.server.config.js`).replace(/__distFolder__/g, distFolder));
            //add scripts
            addOrReplaceScriptInPackageJson(tree, options, "build:server:prod", `ng run ${options.project}:server && webpack --config webpack.server.config.js --progress --colors`);
            addOrReplaceScriptInPackageJson(tree, options, "build:browser:prod", "ng build --prod");
            addOrReplaceScriptInPackageJson(tree, options, "build:prod", "npm run build:server:prod && npm run build:browser:prod");
            addOrReplaceScriptInPackageJson(tree, options, "server", "node local.js");
            // add installation task
            if (!options.skipInstall) {
                context.addTask(new tasks_1.NodePackageInstallTask(options.directory));
            }
            //applying other schematics (if installed)
            const ngToolkitSettings = _utils_1.getNgToolkitInfo(tree, options);
            ngToolkitSettings.universal = options;
            _utils_1.updateNgToolkitInfo(tree, options, ngToolkitSettings);
            if (ngToolkitSettings.serverless) {
                ngToolkitSettings.serverless.directory = options.directory;
                ngToolkitSettings.serverless.skipInstall = true;
                return schematics_1.externalSchematic('@ng-toolkit/serverless', 'ng-add', ngToolkitSettings.serverless)(tree, context);
            }
            return tree;
        }
    ]);
    if (!options.disableBugsnag) {
        return _utils_1.applyAndLog(rule);
    }
    else {
        return rule;
    }
}
exports.default = index;
function addOrReplaceScriptInPackageJson(tree, options, name, script) {
    const packageJsonSource = JSON.parse(test_1.getFileContent(tree, `${options.directory}/package.json`));
    packageJsonSource.scripts[name] = script;
    tree.overwrite(`${options.directory}/package.json`, JSON.stringify(packageJsonSource, null, "  "));
}
//# sourceMappingURL=index.js.map